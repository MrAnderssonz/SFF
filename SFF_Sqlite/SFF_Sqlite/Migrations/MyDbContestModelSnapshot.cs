// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFF_Sqlite.Context;

namespace SFF_Sqlite.Migrations
{
    [DbContext(typeof(MyDbContest))]
    partial class MyDbContestModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("SFF_Sqlite.Models.FilmClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FilmClubs");
                });

            modelBuilder.Entity("SFF_Sqlite.Models.Lending", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FilmClubId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LendingDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FilmClubId");

                    b.HasIndex("MovieId");

                    b.ToTable("Lendings");
                });

            modelBuilder.Entity("SFF_Sqlite.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AverageGrade")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxLending")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("SFF_Sqlite.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LendingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Trivia")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LendingId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SFF_Sqlite.Models.Lending", b =>
                {
                    b.HasOne("SFF_Sqlite.Models.FilmClub", "FilmClub")
                        .WithMany("Lendings")
                        .HasForeignKey("FilmClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFF_Sqlite.Models.Movie", "Movie")
                        .WithMany("Lendings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFF_Sqlite.Models.Review", b =>
                {
                    b.HasOne("SFF_Sqlite.Models.Lending", "Lending")
                        .WithOne("Review")
                        .HasForeignKey("SFF_Sqlite.Models.Review", "LendingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
